// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Tactical app specific fields
  plans         OperationPlan[]
  sharedPlans   PlanShare[]
  preferences   UserPreferences?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Tactical Planning Models
model OperationPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // Ownership
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Plan data
  markers     TacticalMarker[]
  routes      TacticalRoute[]
  notes       PlanNote[]
  objectives  String? // JSON array of objectives
  
  // Metadata
  isPublic    Boolean  @default(false)
  isTemplate  Boolean  @default(false)
  mapVersion  String?  // Which map version this plan is for
  
  // Sharing
  shares      PlanShare[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

model TacticalMarker {
  id          String   @id @default(cuid())
  
  // Position
  latitude    Float
  longitude   Float
  elevation   Float?
  
  // Marker data
  type        MarkerType
  label       String
  description String?
  color       String   @default("#666666")
  icon        String?
  faction     Faction?
  
  // Metadata
  metadata    String?  // JSON for custom data
  isVisible   Boolean  @default(true)
  
  // Relations
  planId      String
  plan        OperationPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([planId])
  @@index([type])
}

model TacticalRoute {
  id          String   @id @default(cuid())
  name        String
  type        RouteType
  color       String   @default("#0066cc")
  
  // Route data
  points      String   // JSON array of [lat, lng] points
  timing      String?  // Timing information
  assignments String?  // JSON array of assigned units/players
  
  // Metadata
  isVisible   Boolean  @default(true)
  priority    Int      @default(1)
  
  // Relations
  planId      String
  plan        OperationPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([planId])
}

model PlanNote {
  id          String   @id @default(cuid())
  content     String
  category    String?  // "intel", "logistics", "timing", etc.
  priority    Int      @default(1)
  
  // Position (optional - can be attached to map location)
  latitude    Float?
  longitude   Float?
  
  // Relations
  planId      String
  plan        OperationPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([planId])
}

model PlanShare {
  id          String   @id @default(cuid())
  
  // Relations
  planId      String
  plan        OperationPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Permissions
  canEdit     Boolean  @default(false)
  canShare    Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  
  @@unique([planId, userId])
}

model UserPreferences {
  id          String   @id @default(cuid())
  
  // Map preferences
  defaultZoom Float    @default(1.0)
  showGrid    Boolean  @default(true)
  showElevation Boolean @default(false)
  
  // Default colors for marker types
  colorScheme String?  // JSON object with color preferences
  
  // Relations
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  updatedAt   DateTime @updatedAt
}

// Enums
enum MarkerType {
  MCU
  OBJECTIVE
  SUPPLY
  ENEMY
  FRIENDLY
  VEHICLE
  MORTAR_US
  MORTAR_USSR
  BUILDING
  CUSTOM
}

enum RouteType {
  ATTACK
  RETREAT
  PATROL
  SUPPLY
  FLANKING
  APPROACH
  EXTRACTION
}

enum Faction {
  US
  USSR
  NEUTRAL
}